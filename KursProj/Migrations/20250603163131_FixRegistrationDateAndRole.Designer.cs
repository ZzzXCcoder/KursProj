// <auto-generated />
using System;
using KursProj.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KursProj.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603163131_FixRegistrationDateAndRole")]
    partial class FixRegistrationDateAndRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("KursProj.Entities.Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("KursProj.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InstructorID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("KursProj.Entities.CourseImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseImages");
                });

            modelBuilder.Entity("KursProj.Entities.CourseTestAvailability", b =>
                {
                    b.Property<Guid>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestID")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonsRequired")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseID", "TestID");

                    b.HasIndex("TestID");

                    b.ToTable("CourseTestAvailabilities");
                });

            modelBuilder.Entity("KursProj.Entities.Lesson", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("KursProj.Entities.LessonImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ImageOrder")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LessonID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.ToTable("LessonImages");
                });

            modelBuilder.Entity("KursProj.Entities.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("KursProj.Entities.Question", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("KursProj.Entities.Test", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("KursProj.Entities.TestResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Score")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TestID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.HasIndex("UserID");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("KursProj.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KursProj.Entities.UserAnswer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestResultID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TestResultID");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("KursProj.Entities.UserCourse", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("KursProj.Entities.UserLessonStatus", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LessonID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UnlockDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "LessonID");

                    b.HasIndex("LessonID");

                    b.ToTable("UserLessonStatuses");
                });

            modelBuilder.Entity("KursProj.Entities.UserLessonView", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LessonID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "LessonID");

                    b.HasIndex("LessonID");

                    b.ToTable("UserLessonViews");
                });

            modelBuilder.Entity("KursProj.Entities.Answer", b =>
                {
                    b.HasOne("KursProj.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("KursProj.Entities.Course", b =>
                {
                    b.HasOne("KursProj.Entities.User", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorID");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("KursProj.Entities.CourseImage", b =>
                {
                    b.HasOne("KursProj.Entities.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("KursProj.Entities.CourseTestAvailability", b =>
                {
                    b.HasOne("KursProj.Entities.Course", "Course")
                        .WithMany("CourseTestAvailabilities")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.Test", "Test")
                        .WithMany("CourseTestAvailabilities")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("KursProj.Entities.Lesson", b =>
                {
                    b.HasOne("KursProj.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("KursProj.Entities.LessonImage", b =>
                {
                    b.HasOne("KursProj.Entities.Lesson", "Lesson")
                        .WithMany("LessonImages")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("KursProj.Entities.Notification", b =>
                {
                    b.HasOne("KursProj.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KursProj.Entities.Question", b =>
                {
                    b.HasOne("KursProj.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("KursProj.Entities.TestResult", b =>
                {
                    b.HasOne("KursProj.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KursProj.Entities.UserAnswer", b =>
                {
                    b.HasOne("KursProj.Entities.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.TestResult", "TestResult")
                        .WithMany("UserAnswers")
                        .HasForeignKey("TestResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("KursProj.Entities.UserCourse", b =>
                {
                    b.HasOne("KursProj.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KursProj.Entities.UserLessonStatus", b =>
                {
                    b.HasOne("KursProj.Entities.Lesson", "Lesson")
                        .WithMany("UserLessonStatuses")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.User", "User")
                        .WithMany("UserLessonStatuses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KursProj.Entities.UserLessonView", b =>
                {
                    b.HasOne("KursProj.Entities.Lesson", "Lesson")
                        .WithMany("UserLessonViews")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KursProj.Entities.User", "User")
                        .WithMany("UserLessonViews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KursProj.Entities.Course", b =>
                {
                    b.Navigation("CourseImages");

                    b.Navigation("CourseTestAvailabilities");

                    b.Navigation("Lessons");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("KursProj.Entities.Lesson", b =>
                {
                    b.Navigation("LessonImages");

                    b.Navigation("UserLessonStatuses");

                    b.Navigation("UserLessonViews");
                });

            modelBuilder.Entity("KursProj.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("KursProj.Entities.Test", b =>
                {
                    b.Navigation("CourseTestAvailabilities");

                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("KursProj.Entities.TestResult", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("KursProj.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Notifications");

                    b.Navigation("TestResults");

                    b.Navigation("UserCourses");

                    b.Navigation("UserLessonStatuses");

                    b.Navigation("UserLessonViews");
                });
#pragma warning restore 612, 618
        }
    }
}
